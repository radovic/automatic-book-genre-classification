{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5581b252",
   "metadata": {},
   "source": [
    "# Labels (genres) EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3dc01882",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import ast\n",
    "import matplotlib.pyplot as plt\n",
    "import os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "8c02001d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       Unnamed: 0   wiki_id     frbs_id                            name  \\\n",
      "0               0       620     /m/0hhy                     Animal Farm   \n",
      "1               1       843     /m/0k36              A Clockwork Orange   \n",
      "2               2       986     /m/0ldx                      The Plague   \n",
      "3               3      2080     /m/0wkt            A Fire Upon the Deep   \n",
      "4               4      2152     /m/0x5g  All Quiet on the Western Front   \n",
      "...           ...       ...         ...                             ...   \n",
      "11401       11401  36126792   /m/044psh               Gates of Paradise   \n",
      "11402       11402  36372465  /m/02vqwsp                  The Third Lynx   \n",
      "11403       11403  36534061   /m/072y44                  Remote Control   \n",
      "11404       11404  37054020  /m/04f1nbs               Transfer of Power   \n",
      "11405       11405  37122323  /m/0n5236t                         Decoded   \n",
      "\n",
      "                     author        date  \\\n",
      "0             George Orwell  1945-08-17   \n",
      "1           Anthony Burgess        1962   \n",
      "2              Albert Camus        1947   \n",
      "3              Vernor Vinge         NaN   \n",
      "4      Erich Maria Remarque  1929-01-29   \n",
      "...                     ...         ...   \n",
      "11401         V. C. Andrews     1989-06   \n",
      "11402          Timothy Zahn        2007   \n",
      "11403            Andy McNab        1997   \n",
      "11404           Vince Flynn  2000-06-01   \n",
      "11405                 Jay-Z  2010-11-16   \n",
      "\n",
      "                                                  genres  \\\n",
      "0      ['realistic fiction', \"children's literature\",...   \n",
      "1                           ['science fiction', 'humor']   \n",
      "2                                  ['realistic fiction']   \n",
      "3                         ['science fiction', 'fantasy']   \n",
      "4                    ['historical', 'realistic fiction']   \n",
      "...                                                  ...   \n",
      "11401                                         ['horror']   \n",
      "11402                                ['science fiction']   \n",
      "11403                                       ['thriller']   \n",
      "11404                                       ['thriller']   \n",
      "11405                                    ['non-fiction']   \n",
      "\n",
      "                                                 summary  \n",
      "0      Old Major, the old boar on the Manor Farm, cal...  \n",
      "1      Alex, a teenager living in near-future England...  \n",
      "2      The text of The Plague is divided into five pa...  \n",
      "3      The novel posits that space around the Milky W...  \n",
      "4      The book tells the story of Paul BÃ¤umer, a Ger...  \n",
      "...                                                  ...  \n",
      "11401  A novel about Annie Stonewall, the daughter of...  \n",
      "11402  The story starts with former government agent,...  \n",
      "11403  The series follows the character of Nick Stone...  \n",
      "11404  The reader first meets Rapp while he is doing ...  \n",
      "11405  The book follows very rough chronological orde...  \n",
      "\n",
      "[11406 rows x 8 columns]\n"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv('../data/dataset_filtered_labels.csv')\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "43b9eb4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        ['realistic fiction', \"children's literature\",...\n",
      "1                             ['science fiction', 'humor']\n",
      "2                                    ['realistic fiction']\n",
      "3                           ['science fiction', 'fantasy']\n",
      "4                      ['historical', 'realistic fiction']\n",
      "                               ...                        \n",
      "11401                                           ['horror']\n",
      "11402                                  ['science fiction']\n",
      "11403                                         ['thriller']\n",
      "11404                                         ['thriller']\n",
      "11405                                      ['non-fiction']\n",
      "Name: genres, Length: 11406, dtype: object\n"
     ]
    }
   ],
   "source": [
    "genres = df['genres'].copy()\n",
    "print(genres)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8fadca08",
   "metadata": {},
   "outputs": [],
   "source": [
    "# genres of each book are represented as a string representation of list, so it needs to be converted to list\n",
    "unique_genres_unfiltered = set()\n",
    "for index, value in genres.items():\n",
    "    genres_lowercase = [genre.lower() for genre in ast.literal_eval(value)]\n",
    "    genres[index] = genres_lowercase\n",
    "    unique_genres_unfiltered.update(genres_lowercase)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "958aa417",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are  15 book genres in the data set.\n"
     ]
    }
   ],
   "source": [
    "print('There are ', str(len(unique_genres_unfiltered)), 'book genres in the data set.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "625efc49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Counting the number of books of each genre\n",
    "def GetGenresFrequencies(unique_genres, genres):\n",
    "    \"\"\"\n",
    "    Input: \n",
    "        unique_genres: list/set of the possible genres\n",
    "        genres: lebels(genres) of the books in the data set\n",
    "    \n",
    "    Output: Sorted dictionary of the book genres(keys) and their frequencies(values) in the data set\n",
    "    \"\"\"\n",
    "    genre_freq= {}\n",
    "    for genre in unique_genres:\n",
    "        for index, genres_list in genres.items():\n",
    "            genre_count = genres_list.count(genre)\n",
    "            if genre not in genre_freq:\n",
    "                genre_freq[genre] = genre_count\n",
    "            else:\n",
    "                genre_freq[genre] = genre_freq.get(genre) + genre_count  \n",
    "                \n",
    "    # Sort the frequency of the genres dictionart, such that most frequent ones appear first\n",
    "    genre_freq_sorted = dict(sorted(genre_freq.items(), key=lambda item: item[1], reverse=True))\n",
    "\n",
    "    return genre_freq_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "351dcf85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'science fiction': 2967, 'realistic fiction': 2516, 'fantasy': 2487, \"children's literature\": 2122, 'mystery': 1396, 'crime': 1303, 'thriller': 1198, 'historical': 1001, 'horror': 594, 'non-fiction': 518, 'romance': 482, 'humor': 358, 'adventure': 333, 'western': 59, 'coming of age': 53}\n"
     ]
    }
   ],
   "source": [
    "genre_freq_unfiltered = GetGenresFrequencies(unique_genres_unfiltered, genres)\n",
    "print(genre_freq_unfiltered)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e9244909",
   "metadata": {},
   "outputs": [],
   "source": [
    "def PrintBooksOfCertainGenre(genre):\n",
    "    \"\"\"\n",
    "    Input: genre: type - string, specifies the genre for the book query\n",
    "    \"\"\"\n",
    "    for index, genres_list in genres.items():\n",
    "        if genres_list.count(genre)>0:\n",
    "            print(df.loc[df.index[index], 'name'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "796a61bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def PrintAllGenresOfBookWihCertainGenre(genre):\n",
    "    \"\"\"\n",
    "    Input: genre - type:string, specifies the genre for the book query\n",
    "    \"\"\"\n",
    "    for index, genres_list in genres.items():\n",
    "        if genres_list.count(genre)>0:\n",
    "            print(df.loc[df.index[index], ['name', 'genres']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d99485c",
   "metadata": {},
   "source": [
    "# Cleaning the data set (based on labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "122aa1da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set all lebels in the dataframe to the lowercase\n",
    "for index in df.index:\n",
    "    genres_lowercase = [genre.lower() for genre in ast.literal_eval(df.at[index,'genres'])]\n",
    "    df.at[index,'genres'] = genres_lowercase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "eef91227",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop books that are not labeled\n",
    "df = df[df['genres'].map(lambda d: len(d)) > 0]\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "de6a31c7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>wiki_id</th>\n",
       "      <th>frbs_id</th>\n",
       "      <th>name</th>\n",
       "      <th>author</th>\n",
       "      <th>date</th>\n",
       "      <th>genres</th>\n",
       "      <th>summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>620</td>\n",
       "      <td>/m/0hhy</td>\n",
       "      <td>Animal Farm</td>\n",
       "      <td>George Orwell</td>\n",
       "      <td>1945-08-17</td>\n",
       "      <td>[realistic fiction, children's literature, humor]</td>\n",
       "      <td>Old Major, the old boar on the Manor Farm, cal...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>843</td>\n",
       "      <td>/m/0k36</td>\n",
       "      <td>A Clockwork Orange</td>\n",
       "      <td>Anthony Burgess</td>\n",
       "      <td>1962</td>\n",
       "      <td>[science fiction, humor]</td>\n",
       "      <td>Alex, a teenager living in near-future England...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>986</td>\n",
       "      <td>/m/0ldx</td>\n",
       "      <td>The Plague</td>\n",
       "      <td>Albert Camus</td>\n",
       "      <td>1947</td>\n",
       "      <td>[realistic fiction]</td>\n",
       "      <td>The text of The Plague is divided into five pa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2080</td>\n",
       "      <td>/m/0wkt</td>\n",
       "      <td>A Fire Upon the Deep</td>\n",
       "      <td>Vernor Vinge</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[science fiction, fantasy]</td>\n",
       "      <td>The novel posits that space around the Milky W...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2152</td>\n",
       "      <td>/m/0x5g</td>\n",
       "      <td>All Quiet on the Western Front</td>\n",
       "      <td>Erich Maria Remarque</td>\n",
       "      <td>1929-01-29</td>\n",
       "      <td>[historical, realistic fiction]</td>\n",
       "      <td>The book tells the story of Paul BÃ¤umer, a Ger...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11401</th>\n",
       "      <td>11401</td>\n",
       "      <td>36126792</td>\n",
       "      <td>/m/044psh</td>\n",
       "      <td>Gates of Paradise</td>\n",
       "      <td>V. C. Andrews</td>\n",
       "      <td>1989-06</td>\n",
       "      <td>[horror]</td>\n",
       "      <td>A novel about Annie Stonewall, the daughter of...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11402</th>\n",
       "      <td>11402</td>\n",
       "      <td>36372465</td>\n",
       "      <td>/m/02vqwsp</td>\n",
       "      <td>The Third Lynx</td>\n",
       "      <td>Timothy Zahn</td>\n",
       "      <td>2007</td>\n",
       "      <td>[science fiction]</td>\n",
       "      <td>The story starts with former government agent,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11403</th>\n",
       "      <td>11403</td>\n",
       "      <td>36534061</td>\n",
       "      <td>/m/072y44</td>\n",
       "      <td>Remote Control</td>\n",
       "      <td>Andy McNab</td>\n",
       "      <td>1997</td>\n",
       "      <td>[thriller]</td>\n",
       "      <td>The series follows the character of Nick Stone...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11404</th>\n",
       "      <td>11404</td>\n",
       "      <td>37054020</td>\n",
       "      <td>/m/04f1nbs</td>\n",
       "      <td>Transfer of Power</td>\n",
       "      <td>Vince Flynn</td>\n",
       "      <td>2000-06-01</td>\n",
       "      <td>[thriller]</td>\n",
       "      <td>The reader first meets Rapp while he is doing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11405</th>\n",
       "      <td>11405</td>\n",
       "      <td>37122323</td>\n",
       "      <td>/m/0n5236t</td>\n",
       "      <td>Decoded</td>\n",
       "      <td>Jay-Z</td>\n",
       "      <td>2010-11-16</td>\n",
       "      <td>[non-fiction]</td>\n",
       "      <td>The book follows very rough chronological orde...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>11406 rows Ã 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0   wiki_id     frbs_id                            name  \\\n",
       "0               0       620     /m/0hhy                     Animal Farm   \n",
       "1               1       843     /m/0k36              A Clockwork Orange   \n",
       "2               2       986     /m/0ldx                      The Plague   \n",
       "3               3      2080     /m/0wkt            A Fire Upon the Deep   \n",
       "4               4      2152     /m/0x5g  All Quiet on the Western Front   \n",
       "...           ...       ...         ...                             ...   \n",
       "11401       11401  36126792   /m/044psh               Gates of Paradise   \n",
       "11402       11402  36372465  /m/02vqwsp                  The Third Lynx   \n",
       "11403       11403  36534061   /m/072y44                  Remote Control   \n",
       "11404       11404  37054020  /m/04f1nbs               Transfer of Power   \n",
       "11405       11405  37122323  /m/0n5236t                         Decoded   \n",
       "\n",
       "                     author        date  \\\n",
       "0             George Orwell  1945-08-17   \n",
       "1           Anthony Burgess        1962   \n",
       "2              Albert Camus        1947   \n",
       "3              Vernor Vinge         NaN   \n",
       "4      Erich Maria Remarque  1929-01-29   \n",
       "...                     ...         ...   \n",
       "11401         V. C. Andrews     1989-06   \n",
       "11402          Timothy Zahn        2007   \n",
       "11403            Andy McNab        1997   \n",
       "11404           Vince Flynn  2000-06-01   \n",
       "11405                 Jay-Z  2010-11-16   \n",
       "\n",
       "                                                  genres  \\\n",
       "0      [realistic fiction, children's literature, humor]   \n",
       "1                               [science fiction, humor]   \n",
       "2                                    [realistic fiction]   \n",
       "3                             [science fiction, fantasy]   \n",
       "4                        [historical, realistic fiction]   \n",
       "...                                                  ...   \n",
       "11401                                           [horror]   \n",
       "11402                                  [science fiction]   \n",
       "11403                                         [thriller]   \n",
       "11404                                         [thriller]   \n",
       "11405                                      [non-fiction]   \n",
       "\n",
       "                                                 summary  \n",
       "0      Old Major, the old boar on the Manor Farm, cal...  \n",
       "1      Alex, a teenager living in near-future England...  \n",
       "2      The text of The Plague is divided into five pa...  \n",
       "3      The novel posits that space around the Milky W...  \n",
       "4      The book tells the story of Paul BÃ¤umer, a Ger...  \n",
       "...                                                  ...  \n",
       "11401  A novel about Annie Stonewall, the daughter of...  \n",
       "11402  The story starts with former government agent,...  \n",
       "11403  The series follows the character of Nick Stone...  \n",
       "11404  The reader first meets Rapp while he is doing ...  \n",
       "11405  The book follows very rough chronological orde...  \n",
       "\n",
       "[11406 rows x 8 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c358be2",
   "metadata": {},
   "source": [
    "## Label filtering and mapping "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5863cd70",
   "metadata": {},
   "source": [
    "The most unfrequent and the broadest genres (which would make the data set extremely imbalanced) are dropped, and the rest are grouped around the broader genres."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "8150e89a",
   "metadata": {},
   "outputs": [],
   "source": [
    "genre_mapping = {\n",
    "                 'science fiction':'science fiction',                      \n",
    "                 'fantasy':'fantasy',                \n",
    "                 'mystery':'mystery',\n",
    "                 'thriller':'thriller',\n",
    "                 'crime':'crime',\n",
    "                 'historical':'historical',\n",
    "                 'non-fiction':'non-fiction',\n",
    "                 'realistic fiction':'realistic fiction',\n",
    "                 \"children's literature\":\"children's literature\",\n",
    "                 'horror':'',\n",
    "                 'romance':'', \n",
    "                 'adventure':'',\n",
    "                 'humor':'',\n",
    "                 'western':'',\n",
    "                 'coming of age':'',              \n",
    "                }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8a4991ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<zip at 0x1ee87b6dd80>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['genres'].items()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "59481621",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Map the genres as specified in the genre_mapping\n",
    "\n",
    "for index, value in df['genres'].items():   \n",
    "    l_new = list()\n",
    "    for elem in value:\n",
    "        l_new.append(genre_mapping.get(elem)) \n",
    "    df.at[index,'genres'] = l_new"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "7e86ad48",
   "metadata": {},
   "outputs": [],
   "source": [
    "for idx, gnr in df['genres'].items():\n",
    "    \n",
    "    # Checking if there are some duplicated labels (as multiple labels from the original data set could have been\n",
    "    # mapped to one label) for the book and dropping them\n",
    "    non_duplicate_genres = list(set(gnr))\n",
    "    df.at[idx,'genres'] = non_duplicate_genres\n",
    "\n",
    "    # Cleaning None values in the genre lists\n",
    "    df.at[idx,'genres'] = [i for i in non_duplicate_genres if i is not None]\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d54cc7b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.at[73,'genres'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "95570dd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['realistic fiction']"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.at[127,'genres']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "d5ccbd98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.at[11401,'genres'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b307e484",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop books\n",
    "df = df[df['genres'].map(lambda d: len(d)) > 0]\n",
    "df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "22fa211d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>wiki_id</th>\n",
       "      <th>frbs_id</th>\n",
       "      <th>name</th>\n",
       "      <th>author</th>\n",
       "      <th>date</th>\n",
       "      <th>genres</th>\n",
       "      <th>summary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>620</td>\n",
       "      <td>/m/0hhy</td>\n",
       "      <td>Animal Farm</td>\n",
       "      <td>George Orwell</td>\n",
       "      <td>1945-08-17</td>\n",
       "      <td>[realistic fiction, children's literature]</td>\n",
       "      <td>Old Major, the old boar on the Manor Farm, cal...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>843</td>\n",
       "      <td>/m/0k36</td>\n",
       "      <td>A Clockwork Orange</td>\n",
       "      <td>Anthony Burgess</td>\n",
       "      <td>1962</td>\n",
       "      <td>[science fiction]</td>\n",
       "      <td>Alex, a teenager living in near-future England...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>986</td>\n",
       "      <td>/m/0ldx</td>\n",
       "      <td>The Plague</td>\n",
       "      <td>Albert Camus</td>\n",
       "      <td>1947</td>\n",
       "      <td>[realistic fiction]</td>\n",
       "      <td>The text of The Plague is divided into five pa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2080</td>\n",
       "      <td>/m/0wkt</td>\n",
       "      <td>A Fire Upon the Deep</td>\n",
       "      <td>Vernor Vinge</td>\n",
       "      <td>NaN</td>\n",
       "      <td>[fantasy, science fiction]</td>\n",
       "      <td>The novel posits that space around the Milky W...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2152</td>\n",
       "      <td>/m/0x5g</td>\n",
       "      <td>All Quiet on the Western Front</td>\n",
       "      <td>Erich Maria Remarque</td>\n",
       "      <td>1929-01-29</td>\n",
       "      <td>[historical, realistic fiction]</td>\n",
       "      <td>The book tells the story of Paul BÃ¤umer, a Ger...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10787</th>\n",
       "      <td>11398</td>\n",
       "      <td>35993963</td>\n",
       "      <td>/m/0jzxgsx</td>\n",
       "      <td>The Bourne Imperative</td>\n",
       "      <td>Robert Ludlum</td>\n",
       "      <td>2012-06-05</td>\n",
       "      <td>[thriller, crime]</td>\n",
       "      <td>:For a more detailed background of the main ch...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10788</th>\n",
       "      <td>11402</td>\n",
       "      <td>36372465</td>\n",
       "      <td>/m/02vqwsp</td>\n",
       "      <td>The Third Lynx</td>\n",
       "      <td>Timothy Zahn</td>\n",
       "      <td>2007</td>\n",
       "      <td>[science fiction]</td>\n",
       "      <td>The story starts with former government agent,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10789</th>\n",
       "      <td>11403</td>\n",
       "      <td>36534061</td>\n",
       "      <td>/m/072y44</td>\n",
       "      <td>Remote Control</td>\n",
       "      <td>Andy McNab</td>\n",
       "      <td>1997</td>\n",
       "      <td>[thriller]</td>\n",
       "      <td>The series follows the character of Nick Stone...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10790</th>\n",
       "      <td>11404</td>\n",
       "      <td>37054020</td>\n",
       "      <td>/m/04f1nbs</td>\n",
       "      <td>Transfer of Power</td>\n",
       "      <td>Vince Flynn</td>\n",
       "      <td>2000-06-01</td>\n",
       "      <td>[thriller]</td>\n",
       "      <td>The reader first meets Rapp while he is doing ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10791</th>\n",
       "      <td>11405</td>\n",
       "      <td>37122323</td>\n",
       "      <td>/m/0n5236t</td>\n",
       "      <td>Decoded</td>\n",
       "      <td>Jay-Z</td>\n",
       "      <td>2010-11-16</td>\n",
       "      <td>[non-fiction]</td>\n",
       "      <td>The book follows very rough chronological orde...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10792 rows Ã 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0   wiki_id     frbs_id                            name  \\\n",
       "0               0       620     /m/0hhy                     Animal Farm   \n",
       "1               1       843     /m/0k36              A Clockwork Orange   \n",
       "2               2       986     /m/0ldx                      The Plague   \n",
       "3               3      2080     /m/0wkt            A Fire Upon the Deep   \n",
       "4               4      2152     /m/0x5g  All Quiet on the Western Front   \n",
       "...           ...       ...         ...                             ...   \n",
       "10787       11398  35993963  /m/0jzxgsx           The Bourne Imperative   \n",
       "10788       11402  36372465  /m/02vqwsp                  The Third Lynx   \n",
       "10789       11403  36534061   /m/072y44                  Remote Control   \n",
       "10790       11404  37054020  /m/04f1nbs               Transfer of Power   \n",
       "10791       11405  37122323  /m/0n5236t                         Decoded   \n",
       "\n",
       "                     author        date  \\\n",
       "0             George Orwell  1945-08-17   \n",
       "1           Anthony Burgess        1962   \n",
       "2              Albert Camus        1947   \n",
       "3              Vernor Vinge         NaN   \n",
       "4      Erich Maria Remarque  1929-01-29   \n",
       "...                     ...         ...   \n",
       "10787         Robert Ludlum  2012-06-05   \n",
       "10788          Timothy Zahn        2007   \n",
       "10789            Andy McNab        1997   \n",
       "10790           Vince Flynn  2000-06-01   \n",
       "10791                 Jay-Z  2010-11-16   \n",
       "\n",
       "                                           genres  \\\n",
       "0      [realistic fiction, children's literature]   \n",
       "1                               [science fiction]   \n",
       "2                             [realistic fiction]   \n",
       "3                      [fantasy, science fiction]   \n",
       "4                 [historical, realistic fiction]   \n",
       "...                                           ...   \n",
       "10787                           [thriller, crime]   \n",
       "10788                           [science fiction]   \n",
       "10789                                  [thriller]   \n",
       "10790                                  [thriller]   \n",
       "10791                               [non-fiction]   \n",
       "\n",
       "                                                 summary  \n",
       "0      Old Major, the old boar on the Manor Farm, cal...  \n",
       "1      Alex, a teenager living in near-future England...  \n",
       "2      The text of The Plague is divided into five pa...  \n",
       "3      The novel posits that space around the Milky W...  \n",
       "4      The book tells the story of Paul BÃ¤umer, a Ger...  \n",
       "...                                                  ...  \n",
       "10787  :For a more detailed background of the main ch...  \n",
       "10788  The story starts with former government agent,...  \n",
       "10789  The series follows the character of Nick Stone...  \n",
       "10790  The reader first meets Rapp while he is doing ...  \n",
       "10791  The book follows very rough chronological orde...  \n",
       "\n",
       "[10792 rows x 8 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1bb554f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are  9 book genres in the data set.\n"
     ]
    }
   ],
   "source": [
    "unique_genres = set()\n",
    "for index, value in df['genres'].items():\n",
    "    unique_genres.update(value)\n",
    "print('There are ', str(len(unique_genres)), 'book genres in the data set.')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "c6913a32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'science fiction': 2967, 'realistic fiction': 2516, 'fantasy': 2487, \"children's literature\": 2122, 'mystery': 1396, 'crime': 1303, 'thriller': 1198, 'historical': 1001, 'non-fiction': 518}\n"
     ]
    }
   ],
   "source": [
    "genre_freq = GetGenresFrequencies(unique_genres, df['genres'])\n",
    "print(genre_freq)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "3c0049f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Saving the modified data set\n",
    "os.chdir('..')\n",
    "df.to_csv('./data/dataset_refiltered_9_labels.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e5c6744",
   "metadata": {},
   "source": [
    "## Visualisations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b8f1d4bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(range(len(genre_freq)), list(genre_freq.values()), align='center')\n",
    "plt.xticks(range(len(genre_freq)), list(genre_freq.keys()))\n",
    "plt.xticks(rotation=70)\n",
    "plt.title('Genres frequency among books')\n",
    "plt.xlabel('Genres')\n",
    "plt.ylabel('Number of books')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bf1be8f",
   "metadata": {},
   "source": [
    "**Conclusion**: The dataset is rather imbalanced, which should be taken into account when implementing the models."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
